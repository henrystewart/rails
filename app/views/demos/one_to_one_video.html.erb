<h1>One-to-one video</h1>
<h4>A simple one-to-one video chat demo</h4>

<p>Link this demo to yourself or a friend:<br>
  <%= link_to request.host + demo_path('one_to_one_video'), demo_path('one_to_one_video') %>
<p>

<div id="form-join">
  <form class="form-horizontal">
    <div class="control-group">
      <label for="room" class="control-label">Room</label>
      <div class="controls">
        <input type="text" id="room" name="room" value="default"/>
      </div>
    </div>
    <div class="control-group">
      <label for="username" class="control-label">Username</label>
      <div class="controls">
        <input type="text" id="username" name="username"/>
      </div>
    </div>
    <br>
  </form>
  <button id="button-join" class="btn btn-primary btn-large">Join</button>
</div>

<div id="form-connect">
  <form class="form-horizontal">
    <div class="control-group">
      <label for="userlist" class="control-label">Connect to a user</label>
      <div class="controls">
        <select id="userlist"></select>
      </div>
    </div>
    <br>
    <button id="connect" class="btn btn-primary btn-large">Connect</button>
  </form>

  <br>

  <!-- Video chat -->
  <div id="video-slots">
	</div>

  <!-- Text chat -->
  <div id="container-text" class="text-chat hide">

    <div id="chatwindow-outer" class="text-chat">
      <div id="chatwindow" class="text-chat">
      </div>
    </div>
    
    <div id="bottom" class="text-chat">
      <input id="message" type="text" name="input" class="text-chat"></input><button id="send" class="btn btn-success btn-large text-chat">Send</button>
    </div>
  </div>
</div>

<script type="text/javascript">

  $(document).ready(function() {
      
    // Initially hide connect form
    $('#form-connect').hide()

    // Randomize username in form
    $("#username").val(randomizeUsername());
    
    // Initialize utilsOneToOne object
	  utilsOneToOne.init();
      
    $("#button-join").click(function(e) {
		  e.preventDefault();
      
		  // Success and fail handlers for user's local video / audio stream allocation
			var getMediaSuccess = function (stream) {
				utilsOneToOne.addVideo({ stream: stream, isLocalStream: true, userId: $('#username').val() });
				utilsOneToOne.localMediaStream( stream );
			};
			var getMediaFailed = function (err) {
				console.log('Get media stream error. ', err);
			};

			// Requests the local video and audio stream
      // Comment this out if you don't want a microphone / webcam request
      utilsOneToOne.getUserMedia(
        { video: true, audio: true },
        getMediaSuccess,
      	getMediaFailed
      );

			// Room information object / container
			var roomInfo = {
        name: $('#room').val()
			};


			// Create the XirSys objects needed to initialize a room
			utilsOneToOne.room( new xRtc.Room(roomInfo) );
      
			// Assign events for updating the room's users list
			utilsOneToOne.room().on( xRtc.Room.events.usersUpdated, utilsOneToOne.refreshRoom )
		    .on( xRtc.Room.events.userConnected, utilsOneToOne.refreshRoom )
				.on( xRtc.Room.events.userDisconnected, utilsOneToOne.refreshRoom )
				.on( xRtc.Room.events.connectionDeclined, utilsOneToOne.refreshRoom )
			  // More events for accepting a call and handling connection creation
				.on( xRtc.Room.events.incomingConnection, utilsOneToOne.acceptCall )
				.on( xRtc.Room.events.connectionCreated, utilsOneToOne.connectionCreated )
        .on( xRtc.Room.events.enter, utilsOneToOne.enterRoom );

		  // Map all other default events
			utilsOneToOne.subscribe( utilsOneToOne.room(), xRtc.Room.events );

			// Enter / open room
			utilsOneToOne.room().enter($("#username").val(), { autoReply: false });
      utilsOneToOne.username($("#username").val());
        
      // Hide join form and button
      $('#form-join').hide()
      $('#form-connect').show()
    });

    // Handles connect button click
	  $("#connect").click(function (e) {
			e.preventDefault();
        
      var contact = $("#userlist").val();
      console.log('Connecting to participant:', contact);
			// Connects to remote peer
      // Notice we've disabled createDataChannel for this use case
      // utilsManyToMany.preConnect(participants[i], { createDataChannel: 'auto' });
      
      // Connect to participant
      utilsOneToOne.preConnect(contact);
	  });
    
    // Sends a message
    $("#send").click(function (e) {
		  e.preventDefault();
      if ($("#message").val() != "") {
        utilsOneToOne.sendMessage($("#message").val());
        $("#message").val("");
      }
		});

    // Hitting enter sends message if not empty
    $("#message").keyup(function(event){
      if(event.keyCode == 13){
        if (this.value != "") {
          utilsOneToOne.sendMessage($("#message").val());
          this.value = "";
        }
      }
    });

  });

  // Randomizes username for form
  function randomizeUsername() {
    var username = "";
    var possible = "abcdefghijklmnopqrstuvwxyz";

    for( var i=0; i < 5; i++ )
        username += possible.charAt(Math.floor(Math.random() * possible.length));

    return username;
  }

</script>
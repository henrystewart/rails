<h1>Many-to-many video (dynamic)</h1>
<h4>A simple many-to-many video demo that connects to users dynamically</h4>

<% if @show_form %>
  <form class="form-horizontal">
    <div class="control-group">
      <label for="room" class="control-label">Room</label>
      <div class="controls">
        <input type="text" id="room" name="room" value="default"/>
      </div>
    </div>
    <div class="control-group">
      <label for="username" class="control-label">Username</label>
      <div class="controls">
        <input type="text" id="username" name="username" value="alex"/>
      </div>
    </div>
    <br>
    <input type="submit" value="Join" class="btn btn-primary btn-large"/>
  </form>
<% else %>
  <form class="form-horizontal">
    <div class="control-group">
      <label for="userlist" class="control-label">Other users in this room</label>
      <div class="controls">
        <ul id="userlist">
        </ul>
      </div>
    </div>
    <button id="connect" class="btn btn-primary btn-large">Connect</button>
  </form>

  <br>

  <div id="video-slots">
	</div>

  <script type="text/javascript">

		$(document).ready(function() {

      // initialise utilsManyToManyVideoDynamic object
			utilsManyToManyVideoDynamic.init();
      
				// success and fail handlers for users local video/audio stream allocation
				var getMediaSuccess = function (stream) {
					utilsManyToManyVideoDynamic.addVideo({ stream: stream, isLocalStream: true, userId: gon.username });
					utilsManyToManyVideoDynamic.localMediaStream( stream );
				};
				var getMediaFailed = function (err) {
					console.log('Get media stream error. ', err);
				};

				// request the local video and audio stream
				utilsManyToManyVideoDynamic.getUserMedia(
					{ video: true, audio: true },
					getMediaSuccess,
					getMediaFailed
				);

				// room information object / container
				var roomInfo = {
          name: gon.room
				};


				// create XirSys objects needed to initialise a room
				utilsManyToManyVideoDynamic.room( new xRtc.Room(roomInfo) );
      
				// assign events for updating the rooms user list
				utilsManyToManyVideoDynamic.room().on( xRtc.Room.events.usersUpdated, utilsManyToManyVideoDynamic.refreshRoom )
							.on( xRtc.Room.events.userConnected, utilsManyToManyVideoDynamic.refreshRoom )
							.on( xRtc.Room.events.userDisconnected, utilsManyToManyVideoDynamic.refreshRoom )
							.on( xRtc.Room.events.connectionDeclined, utilsManyToManyVideoDynamic.refreshRoom )
							// more events for accepting a call and handling connection creation
							.on( xRtc.Room.events.incomingConnection, utilsManyToManyVideoDynamic.acceptCall )
							.on( xRtc.Room.events.connectionCreated, utilsManyToManyVideoDynamic.connectionCreated );

				// map all other default events
				utilsManyToManyVideoDynamic.subscribe( utilsManyToManyVideoDynamic.room(), xRtc.Room.events );

        

				// Enter / open room
				utilsManyToManyVideoDynamic.room().enter(gon.username, { autoReply: false });

			/**********************************
			 *
			 *   Handles connect button click
			 *
			 **********************************/
			$("#connect").click(function (e) {
				e.preventDefault();
				// get username of remote peer
        
        // Grab room participants from list
        var participants = [];
        $('li.participant').each(function(i, elem) {
            participants.push($(elem).text());
        });
        
				console.log('Connecting to participants...');
				// connect to remote peer
        for (var i = 0; i < participants.length; i++) {
          // Remove existing video slot if name matches
          $("#video-" + participants[i]).remove();
          utilsManyToManyVideoDynamic.room().connect(participants[i], {});
        }
			});

		});

	</script>

<% end %>